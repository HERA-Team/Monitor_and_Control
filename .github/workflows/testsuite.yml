name: Run Tests
on: [push, pull_request]

jobs:
  flake8:
    name: Flake8
    runs-on: ubuntu-latest
    env:
      ENV_NAME: linting
      WITH_SUDO: yes
      PYTHON: 3.7
    steps:
     - uses: actions/checkout@master
       with:
         fetch-depth: 1

     - name: Get Miniconda Linux
       run: |
         wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
         bash $HOME/miniconda.sh -b -p $HOME/miniconda
     - name: Setup Environment
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         ./ci/install_conda.sh
     - name: Linting
       run: |
         export PATH="$HOME/miniconda/bin:$PATH"
         source activate $ENV_NAME
         flake8
  tests:
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      WITH_SUDO: yes
      OS: ${{ matrix.os }}
      # use localhost for the host here because we are running the job on the VM.
      POSTGRES_HOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    name: Testing
    needs: [flake8]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [2.7, 3.6, 3.7, 3.8]
    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        # will assign a random free host port
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Get Miniconda Linux
        run: |
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/miniconda.sh;
          bash $HOME/miniconda.sh -b -p $HOME/miniconda
      - name: Setup Environment
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          ./ci/install_conda.sh
      - name: Install
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate ${ENV_NAME}
          pip install -e .[all]
      - name: Setup postgres
        run: |
          export POSTGRES_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB
          psql $POSTGRES_URL -c 'create database hera_mc_test;'
          psql $POSTGRES_URL -c 'create database hera_mc;'
          psql $POSTGRES_URL -c "create user hera with password 'hera';"
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
      - name: Logging output
        if: failure()
        run: |
          export POSTGRES_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB
          echo "POSTGRES URL"
          echo $POSTGRES_URL
          echo "psql roles"
          psql  $POSTGRES_URL -c "SELECT rolname FROM pg_roles;"
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
      - name: Upgrade Database Schema
        run: |
          export PATH="$HOME/miniconda/bin:$PSQL_PATH:$PATH"
          source activate $ENV_NAME
          mkdir ~/.hera_mc
          echo "cp ci/example_config.json ~/.hera_mc/mc_config.json"
          cp ci/example_config.json ~/.hera_mc/mc_config.json
          echo "alembic upgrade head"
          alembic upgrade head
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
      - name: Logging output
        if: failure()
        run: |
          echo "mc_config.json settings"
          cat ~/.hera_mc/mc_config.json
          echo "hera psql info"
          psql -c "SELECT rolname, rolpassword FROM pg_catalog.pg_authid WHERE rolname='hera';" -U postgres
      - name: Run Tests
        run: |
          export PATH="$HOME/miniconda/bin:$PATH"
          source activate $ENV_NAME
          python -m pytest -v --cov=hera_mc --cov-config=.coveragerc --cov-report xml:./coverage.xml --junitxml=test-reports/xunit.xml
        env:
          POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port

      - uses: codecov/codecov-action@master
        if: matrix.os == 'ubuntu-latest' && success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional
